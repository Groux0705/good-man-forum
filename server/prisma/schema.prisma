generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String
  password  String?  // OAuth用户可能没有密码
  avatar    String?
  provider  String   @default("local") // 认证提供商: local, google, github
  providerId String? // OAuth提供商的用户ID
  bio       String?
  role      String   @default("user") // 用户角色: user, moderator, admin
  balance   Int      @default(100)  // 用户积分/金币
  level     Int      @default(1)    // 用户等级
  experience Int     @default(0)    // 经验值
  status    String   @default("active") // 用户状态: active, banned, suspended, reviewing, muted
  phone     String? // 手机号
  realName  String? // 实名信息
  idCard    String? // 身份证号
  trustScore Int     @default(100) // 信用分数 0-100
  violationCount Int @default(0) // 违规次数
  lastActiveAt DateTime @default(now()) // 最后活跃时间
  registrationIp String? // 注册IP
  lastLoginIp String? // 最后登录IP
  deviceFingerprint String? // 设备指纹
  emailVerified Boolean @default(false) // 邮箱验证状态
  phoneVerified Boolean @default(false) // 手机验证状态
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topics    Topic[]
  replies   Reply[]
  votes     Vote[]
  topicLikes TopicLike[]
  topicFavorites TopicFavorite[]
  notifications Notification[]
  pushSubscriptions PushSubscription[]
  courses   Course[]
  courseComments CourseComment[]
  enrollments CourseEnrollment[]  // 新增：用户课程报名关系
  lessonProgress LessonProgress[]  // 新增：用户学习进度
  pointHistory PointHistory[]      // 新增：积分变动记录
  badges       UserBadge[]         // 新增：用户勋章
  dailyTasks   DailyTaskProgress[] // 新增：每日任务进度
  specialTags  UserSpecialTag[]    // 新增：专属标识
  adminLogs    AdminLog[]          // 管理员操作日志
  reports      Report[] @relation("UserReports")      // 用户举报
  handledReports Report[] @relation("AdminHandledReports") // 管理员处理的举报
  punishments  UserPunishment[]    // 用户处罚记录
  appeals      UserAppeal[]        // 用户申诉记录
  loginLogs    UserLoginLog[]      // 登录日志
  passwordResetTokens PasswordResetToken[] // 密码重置令牌

  @@unique([email, provider]) // 同一邮箱可以在不同provider下存在
  @@map("users")
}

model Node {
  id          String   @id @default(cuid())
  name        String   @unique
  title       String
  description String?
  avatar      String?
  header      String?
  topics      Int      @default(0)  // 主题数量
  isActive    Boolean  @default(true) // 节点状态：激活/停用
  sort        Int      @default(0)    // 排序权重
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  topicList   Topic[]

  @@map("nodes")
}

model Topic {
  id         String   @id @default(cuid())
  title      String
  content    String
  userId     String
  nodeId     String
  status     String   @default("published") // 主题状态: published, hidden, deleted
  replies    Int      @default(0)     // 回复数量
  clicks     Int      @default(0)     // 点击数
  likes      Int      @default(0)     // 点赞数
  favorites  Int      @default(0)     // 收藏数
  lastReply  DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  node       Node     @relation(fields: [nodeId], references: [id])
  replyList  Reply[]
  votes      Vote[]
  topicLikes TopicLike[]
  topicFavorites TopicFavorite[]

  @@map("topics")
}

model Reply {
  id              String   @id @default(cuid())
  content         String
  userId          String
  topicId         String
  parentId        String?  // 父回复ID，支持嵌套回复
  replyToUsername String?  // 被回复的用户名，便于平铺显示
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  parent    Reply?   @relation("ReplyToReply", fields: [parentId], references: [id], onDelete: Cascade)
  children  Reply[]  @relation("ReplyToReply")

  @@map("replies")
}

model Vote {
  id      String @id @default(cuid())
  userId  String
  topicId String
  type    String // "up" or "down"

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  @@map("votes")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // "topic_reply", "comment_reply", "topic_vote", "comment_vote", "course_comment", "course_enrollment", "mention", "topic_like", "topic_favorite"
  title     String
  content   String
  read      Boolean  @default(false)
  data      String?  // JSON string with additional structured data (topic_id, course_id, reply_id, etc.)
  actionUrl String?  // Deep link URL for the notification
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String
  p256dh    String
  auth      String
  userAgent String?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint])
  @@map("push_subscriptions")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  thumbnail   String?  // 课程封面图
  category    String   // 课程分类 "relationship", "communication", "self-improvement"
  tags        String?  // 标签，用逗号分隔
  difficulty  String   @default("beginner") // 难度等级 "beginner", "intermediate", "advanced"
  
  // 课程统计信息
  views       Int      @default(0)  // 观看次数
  likes       Int      @default(0)  // 点赞数
  enrollments Int      @default(0)  // 报名人数
  
  // 课程要求和目标
  requirements String?  // 课程要求
  objectives   String?  // 课程目标
  
  // 课程状态
  published   Boolean  @default(false)  // 是否发布
  featured    Boolean  @default(false)  // 是否推荐
  
  // 创建和更新时间
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  userId      String   // 讲师ID
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 一对多关系
  chapters    CourseChapter[]     // 课程章节
  comments    CourseComment[]     // 课程评论
  enrollmentList CourseEnrollment[] // 报名记录

  @@map("courses")
}

model CourseComment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_comments")
}

// 新增：课程章节模型
model CourseChapter {
  id          String   @id @default(cuid())
  title       String   // 章节标题
  description String?  // 章节描述
  order       Int      // 章节顺序
  duration    Int?     // 章节时长（秒）
  
  // 关联关系
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  // 一对多关系
  lessons     CourseLesson[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("course_chapters")
}

// 新增：课程小节模型
model CourseLesson {
  id          String   @id @default(cuid())
  title       String   // 小节标题
  description String?  // 小节描述
  order       Int      // 小节顺序
  
  // 课程内容
  type        String   // 课程类型 "video", "text"
  content     String?  // 文字课程内容（Markdown格式）
  videoUrl    String?  // 视频URL (仅视频课程)
  platform    String?  // 平台类型 "youtube", "bilibili", "local" (仅视频课程)
  duration    Int?     // 课程时长（秒）
  
  // 学习状态
  views       Int      @default(0)  // 观看次数
  
  // 关联关系
  chapterId   String
  chapter     CourseChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  
  // 学习进度
  progress    LessonProgress[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("course_lessons")
}

// 新增：用户课程报名关系
model CourseEnrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())
  
  // 学习进度
  progress    Float    @default(0.0)  // 完成进度 0.0-1.0
  completed   Boolean  @default(false) // 是否完成
  completedAt DateTime?
  
  // 关联关系
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@map("course_enrollments")
}

// 新增：课程小节学习进度
model LessonProgress {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  
  // 学习状态
  completed   Boolean  @default(false)
  progress    Float    @default(0.0)  // 观看进度 0.0-1.0
  watchTime   Int      @default(0)    // 观看时长（秒）
  
  // 时间记录
  startedAt   DateTime @default(now())
  completedAt DateTime?
  lastWatchedAt DateTime @default(now())
  
  // 关联关系
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      CourseLesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

// 新增：主题点赞模型
model TopicLike {
  id       String   @id @default(cuid())
  userId   String
  topicId  String
  createdAt DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic    Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  @@map("topic_likes")
}

// 新增：主题收藏模型
model TopicFavorite {
  id       String   @id @default(cuid())
  userId   String
  topicId  String
  createdAt DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic    Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  @@map("topic_favorites")
}

// 新增：积分变动记录模型
model PointHistory {
  id        String   @id @default(cuid())
  userId    String
  amount    Int      // 积分变动量（正数为获得，负数为消费）
  type      String   // 变动类型：'post', 'reply', 'like', 'favorite', 'login', 'course_complete', 'admin', 'consume' 等
  reason    String   // 变动原因描述
  relatedId String?  // 关联的内容ID（主题ID、回复ID等）
  relatedType String? // 关联内容类型：'topic', 'reply', 'course', 'lesson' 等
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("point_history")
}

// 勋章系统
model Badge {
  id          String   @id @default(cuid())
  name        String   @unique         // 勋章名称
  title       String                   // 勋章标题
  description String                   // 勋章描述
  icon        String                   // 勋章图标（emoji或图片URL）
  category    String                   // 勋章分类：'activity', 'achievement', 'special', 'time'
  rarity      String   @default("common") // 稀有度：'common', 'rare', 'epic', 'legendary'
  
  // 获得条件
  condition   String                   // 获得条件JSON字符串
  points      Int      @default(0)     // 获得勋章奖励的积分
  experience  Int      @default(0)     // 获得勋章奖励的经验值
  
  // 状态
  active      Boolean  @default(true)  // 是否激活
  order       Int      @default(0)     // 排序
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  userBadges  UserBadge[]
  
  @@map("badges")
}

// 用户勋章关系
model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  earnedAt  DateTime @default(now())
  
  // 关联关系
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, badgeId])
  @@map("user_badges")
}

// 每日任务模板
model DailyTask {
  id          String   @id @default(cuid())
  name        String   @unique         // 任务名称
  title       String                   // 任务标题
  description String                   // 任务描述
  icon        String                   // 任务图标
  category    String                   // 任务分类：'social', 'learning', 'activity'
  
  // 任务要求
  target      Int                      // 目标数量
  type        String                   // 任务类型：'post', 'reply', 'like', 'checkin', 'course_time'
  
  // 奖励
  points      Int      @default(5)     // 完成奖励积分  
  experience  Int      @default(5)     // 完成奖励经验值
  
  // 状态
  active      Boolean  @default(true)  // 是否激活
  order       Int      @default(0)     // 排序
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  userProgress DailyTaskProgress[]
  
  @@map("daily_tasks")
}

// 用户每日任务进度
model DailyTaskProgress {
  id        String   @id @default(cuid())
  userId    String
  taskId    String
  date      String                     // 日期字符串 YYYY-MM-DD
  
  // 进度
  progress  Int      @default(0)       // 当前进度
  completed Boolean  @default(false)   // 是否完成
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // 关联关系
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  task      DailyTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@unique([userId, taskId, date])
  @@map("daily_task_progress")
}

// 专属标识模板
model SpecialTag {
  id          String   @id @default(cuid())
  name        String   @unique         // 标识名称
  title       String                   // 标识标题
  description String                   // 标识描述
  icon        String                   // 标识图标
  color       String   @default("#3B82F6") // 标识颜色
  category    String                   // 标识分类：'vip', 'admin', 'special', 'achievement'
  
  // 权限和特权
  privileges  String?                  // 特权JSON字符串
  
  // 获得条件
  condition   String?                  // 获得条件JSON字符串
  permanent   Boolean  @default(false) // 是否永久有效
  duration    Int?                     // 有效期（天数，null表示永久）
  
  // 状态
  active      Boolean  @default(true)  // 是否激活
  order       Int      @default(0)     // 排序
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  userTags    UserSpecialTag[]
  
  @@map("special_tags")
}

// 用户专属标识关系
model UserSpecialTag {
  id        String   @id @default(cuid())
  userId    String
  tagId     String
  
  // 有效期
  grantedAt DateTime @default(now())
  expiresAt DateTime?                  // 过期时间，null表示永久
  active    Boolean  @default(true)    // 是否激活显示
  
  // 关联关系
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tag       SpecialTag @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([userId, tagId])
  @@map("user_special_tags")
}

// 管理员操作日志
model AdminLog {
  id        String   @id @default(cuid())
  adminId   String   // 管理员ID
  action    String   // 操作类型: CREATE, UPDATE, DELETE, BAN, UNBAN等
  resource  String   // 操作对象: user, topic, reply, node等
  resourceId String? // 操作对象ID
  details   String?  // 操作详情(JSON格式)
  ipAddress String?  // 操作IP地址
  userAgent String?  // 用户代理
  
  // 关联关系
  admin     User     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@map("admin_logs")
}

// 举报系统
model Report {
  id        String   @id @default(cuid())
  reporterId String  // 举报人ID
  type      String   // 举报类型: topic, reply, user
  targetId  String   // 被举报对象ID
  reason    String   // 举报原因
  category  String   // 举报分类: spam, harassment, inappropriate等
  status    String   @default("pending") // 状态: pending, resolved, dismissed
  adminNote String?  // 管理员备注
  handlerId String?  // 处理管理员ID
  handledAt DateTime? // 处理时间
  
  // 关联关系
  reporter  User     @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)
  handler   User?    @relation("AdminHandledReports", fields: [handlerId], references: [id], onDelete: SetNull)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("reports")
}

// 系统设置
model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique // 设置键名
  value     String   // 设置值(JSON格式)
  category  String   // 设置分类: general, security, notification等
  description String? // 设置描述
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("system_settings")
}

// 用户处罚记录
model UserPunishment {
  id        String   @id @default(cuid())
  userId    String   // 被处罚用户ID
  adminId   String   // 执行处罚的管理员ID
  type      String   // 处罚类型: ban, mute, warning, suspend
  reason    String   // 处罚原因
  details   String?  // 详细信息(JSON格式)
  duration  Int?     // 处罚时长(分钟，null表示永久)
  startTime DateTime @default(now()) // 处罚开始时间
  endTime   DateTime? // 处罚结束时间
  status    String   @default("active") // 状态: active, expired, revoked
  evidence  String?  // 证据(JSON格式，包含截图链接等)
  severity  Int      @default(1) // 严重程度 1-5
  
  // 关联关系
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("user_punishments")
}

// 用户申诉记录
model UserAppeal {
  id          String   @id @default(cuid())
  userId      String   // 申诉用户ID
  punishmentId String? // 关联的处罚记录ID（可选）
  type        String   // 申诉类型: punishment_appeal, account_recovery, content_appeal
  title       String   // 申诉标题
  content     String   // 申诉内容
  evidence    String?  // 申诉证据(JSON格式)
  status      String   @default("pending") // 状态: pending, processing, approved, rejected, closed
  adminId     String?  // 处理的管理员ID
  adminNote   String?  // 管理员备注
  handledAt   DateTime? // 处理时间
  priority    String   @default("normal") // 优先级: low, normal, high, urgent
  
  // 关联关系
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("user_appeals")
}

// 用户登录日志
model UserLoginLog {
  id              String   @id @default(cuid())
  userId          String   // 用户ID
  ip              String   // 登录IP
  userAgent       String?  // 用户代理
  deviceFingerprint String? // 设备指纹
  location        String?  // 地理位置
  success         Boolean  // 是否成功
  failReason      String?  // 失败原因
  
  // 关联关系
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  
  @@map("user_login_logs")
}

// 用户操作日志
model UserActionLog {
  id        String   @id @default(cuid())
  userId    String   // 用户ID
  action    String   // 操作类型: login, logout, post, reply, vote, etc.
  resource  String   // 操作对象: topic, reply, user, etc.
  resourceId String? // 操作对象ID
  details   String?  // 操作详情(JSON格式)
  ip        String   // 操作IP
  userAgent String?  // 用户代理
  
  createdAt DateTime @default(now())
  
  @@map("user_action_logs")
}

// 批量操作记录
model BatchOperation {
  id        String   @id @default(cuid())
  adminId   String   // 执行操作的管理员ID
  type      String   // 操作类型: batch_ban, batch_mute, batch_delete
  targets   String   // 目标用户ID列表(JSON格式)
  params    String   // 操作参数(JSON格式)
  status    String   @default("pending") // 状态: pending, processing, completed, failed
  progress  Int      @default(0) // 进度百分比
  result    String?  // 执行结果(JSON格式)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("batch_operations")
}

// 密码重置令牌
model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String   // 用户ID
  token     String   @unique // 重置令牌
  expiresAt DateTime // 过期时间
  used      Boolean  @default(false) // 是否已使用
  
  // 关联关系
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@map("password_reset_tokens")
}
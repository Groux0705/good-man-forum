generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  avatar    String?
  bio       String?
  balance   Int      @default(100)  // 用户积分
  level     Int      @default(1)    // 用户等级
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topics    Topic[]
  replies   Reply[]
  votes     Vote[]
  notifications Notification[]
  courses   Course[]
  courseComments CourseComment[]

  @@map("users")
}

model Node {
  id          String   @id @default(cuid())
  name        String   @unique
  title       String
  description String?
  avatar      String?
  header      String?
  topics      Int      @default(0)  // 主题数量
  createdAt   DateTime @default(now())

  topicList   Topic[]

  @@map("nodes")
}

model Topic {
  id         String   @id @default(cuid())
  title      String
  content    String
  userId     String
  nodeId     String
  replies    Int      @default(0)     // 回复数量
  clicks     Int      @default(0)     // 点击数
  lastReply  DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  node       Node     @relation(fields: [nodeId], references: [id])
  replyList  Reply[]
  votes      Vote[]

  @@map("topics")
}

model Reply {
  id              String   @id @default(cuid())
  content         String
  userId          String
  topicId         String
  parentId        String?  // 父回复ID，支持嵌套回复
  replyToUsername String?  // 被回复的用户名，便于平铺显示
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  parent    Reply?   @relation("ReplyToReply", fields: [parentId], references: [id], onDelete: Cascade)
  children  Reply[]  @relation("ReplyToReply")

  @@map("replies")
}

model Vote {
  id      String @id @default(cuid())
  userId  String
  topicId String
  type    String // "up" or "down"

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  @@map("votes")
}

model Notification {
  id      String  @id @default(cuid())
  userId  String
  title   String
  content String
  read    Boolean @default(false)
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  thumbnail   String?  // 课程缩略图
  type        String   // 课程类型 "video", "text"
  content     String?  // 文字课程内容（Markdown格式）
  videoUrl    String?  // 视频URL (仅视频课程)
  platform    String?  // 平台类型 "youtube", "bilibili", "local" (仅视频课程)
  category    String   // 课程分类 "relationship", "communication", "self-improvement"
  tags        String?  // 标签，用逗号分隔
  duration    Int?     // 课程时长（秒，视频课程）或阅读时长（文字课程）
  difficulty  String   @default("beginner") // 难度等级 "beginner", "intermediate", "advanced"
  views       Int      @default(0)  // 观看次数
  likes       Int      @default(0)  // 点赞数
  userId      String   // 上传者ID
  published   Boolean  @default(false)  // 是否发布
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    CourseComment[]

  @@map("courses")
}

model CourseComment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_comments")
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  avatar    String?
  bio       String?
  balance   Int      @default(100)  // 用户积分/金币
  level     Int      @default(1)    // 用户等级
  experience Int     @default(0)    // 经验值
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topics    Topic[]
  replies   Reply[]
  votes     Vote[]
  topicLikes TopicLike[]
  topicFavorites TopicFavorite[]
  notifications Notification[]
  pushSubscriptions PushSubscription[]
  courses   Course[]
  courseComments CourseComment[]
  enrollments CourseEnrollment[]  // 新增：用户课程报名关系
  lessonProgress LessonProgress[]  // 新增：用户学习进度
  pointHistory PointHistory[]      // 新增：积分变动记录

  @@map("users")
}

model Node {
  id          String   @id @default(cuid())
  name        String   @unique
  title       String
  description String?
  avatar      String?
  header      String?
  topics      Int      @default(0)  // 主题数量
  createdAt   DateTime @default(now())

  topicList   Topic[]

  @@map("nodes")
}

model Topic {
  id         String   @id @default(cuid())
  title      String
  content    String
  userId     String
  nodeId     String
  replies    Int      @default(0)     // 回复数量
  clicks     Int      @default(0)     // 点击数
  likes      Int      @default(0)     // 点赞数
  favorites  Int      @default(0)     // 收藏数
  lastReply  DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  node       Node     @relation(fields: [nodeId], references: [id])
  replyList  Reply[]
  votes      Vote[]
  topicLikes TopicLike[]
  topicFavorites TopicFavorite[]

  @@map("topics")
}

model Reply {
  id              String   @id @default(cuid())
  content         String
  userId          String
  topicId         String
  parentId        String?  // 父回复ID，支持嵌套回复
  replyToUsername String?  // 被回复的用户名，便于平铺显示
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  parent    Reply?   @relation("ReplyToReply", fields: [parentId], references: [id], onDelete: Cascade)
  children  Reply[]  @relation("ReplyToReply")

  @@map("replies")
}

model Vote {
  id      String @id @default(cuid())
  userId  String
  topicId String
  type    String // "up" or "down"

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  @@map("votes")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // "topic_reply", "comment_reply", "topic_vote", "comment_vote", "course_comment", "course_enrollment", "mention", "topic_like", "topic_favorite"
  title     String
  content   String
  read      Boolean  @default(false)
  data      String?  // JSON string with additional structured data (topic_id, course_id, reply_id, etc.)
  actionUrl String?  // Deep link URL for the notification
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String
  p256dh    String
  auth      String
  userAgent String?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint])
  @@map("push_subscriptions")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  thumbnail   String?  // 课程封面图
  category    String   // 课程分类 "relationship", "communication", "self-improvement"
  tags        String?  // 标签，用逗号分隔
  difficulty  String   @default("beginner") // 难度等级 "beginner", "intermediate", "advanced"
  
  // 课程统计信息
  views       Int      @default(0)  // 观看次数
  likes       Int      @default(0)  // 点赞数
  enrollments Int      @default(0)  // 报名人数
  
  // 课程要求和目标
  requirements String?  // 课程要求
  objectives   String?  // 课程目标
  
  // 课程状态
  published   Boolean  @default(false)  // 是否发布
  featured    Boolean  @default(false)  // 是否推荐
  
  // 创建和更新时间
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  userId      String   // 讲师ID
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 一对多关系
  chapters    CourseChapter[]     // 课程章节
  comments    CourseComment[]     // 课程评论
  enrollmentList CourseEnrollment[] // 报名记录

  @@map("courses")
}

model CourseComment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_comments")
}

// 新增：课程章节模型
model CourseChapter {
  id          String   @id @default(cuid())
  title       String   // 章节标题
  description String?  // 章节描述
  order       Int      // 章节顺序
  duration    Int?     // 章节时长（秒）
  
  // 关联关系
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  // 一对多关系
  lessons     CourseLesson[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("course_chapters")
}

// 新增：课程小节模型
model CourseLesson {
  id          String   @id @default(cuid())
  title       String   // 小节标题
  description String?  // 小节描述
  order       Int      // 小节顺序
  
  // 课程内容
  type        String   // 课程类型 "video", "text"
  content     String?  // 文字课程内容（Markdown格式）
  videoUrl    String?  // 视频URL (仅视频课程)
  platform    String?  // 平台类型 "youtube", "bilibili", "local" (仅视频课程)
  duration    Int?     // 课程时长（秒）
  
  // 学习状态
  views       Int      @default(0)  // 观看次数
  
  // 关联关系
  chapterId   String
  chapter     CourseChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  
  // 学习进度
  progress    LessonProgress[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("course_lessons")
}

// 新增：用户课程报名关系
model CourseEnrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())
  
  // 学习进度
  progress    Float    @default(0.0)  // 完成进度 0.0-1.0
  completed   Boolean  @default(false) // 是否完成
  completedAt DateTime?
  
  // 关联关系
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@map("course_enrollments")
}

// 新增：课程小节学习进度
model LessonProgress {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  
  // 学习状态
  completed   Boolean  @default(false)
  progress    Float    @default(0.0)  // 观看进度 0.0-1.0
  watchTime   Int      @default(0)    // 观看时长（秒）
  
  // 时间记录
  startedAt   DateTime @default(now())
  completedAt DateTime?
  lastWatchedAt DateTime @default(now())
  
  // 关联关系
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      CourseLesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

// 新增：主题点赞模型
model TopicLike {
  id       String   @id @default(cuid())
  userId   String
  topicId  String
  createdAt DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic    Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  @@map("topic_likes")
}

// 新增：主题收藏模型
model TopicFavorite {
  id       String   @id @default(cuid())
  userId   String
  topicId  String
  createdAt DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic    Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  @@map("topic_favorites")
}

// 新增：积分变动记录模型
model PointHistory {
  id        String   @id @default(cuid())
  userId    String
  amount    Int      // 积分变动量（正数为获得，负数为消费）
  type      String   // 变动类型：'post', 'reply', 'like', 'favorite', 'login', 'course_complete', 'admin', 'consume' 等
  reason    String   // 变动原因描述
  relatedId String?  // 关联的内容ID（主题ID、回复ID等）
  relatedType String? // 关联内容类型：'topic', 'reply', 'course', 'lesson' 等
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("point_history")
}